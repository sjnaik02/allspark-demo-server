import os
import json
from dotenv import load_dotenv


from langchain_community.chat_models import ChatOpenAI
from langchain_community.document_loaders import PDFMinerLoader
from kor.extraction import create_extraction_chain
from langchain_community.vectorstores import Chroma

from pydantic import BaseModel, Field, validator
from kor import extract_from_documents, from_pydantic, create_extraction_chain
from langchain_community.callbacks import get_openai_callback
from langchain.text_splitter import CharacterTextSplitter

from langchain_openai import ChatOpenAI
from langchain_openai import OpenAIEmbeddings

from langchain_core.prompts import ChatPromptTemplate
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import create_retrieval_chain

from lib import load_chunk_pdf

def main(file_path = None):

    # Set up the OpenAI API key
    load_dotenv()
    openai_api_key = os.getenv("OPENAI_API_KEY")
    
    # Initialize the ChatOpenAI model
    llm = ChatOpenAI(
        model_name="gpt-4o",
        temperature=0,
        api_key=openai_api_key
    )

    print("Opening case files...")

    # Usage
    if file_path is None:
        legalfile = "./content/legal/testMatter2.pdf"
    else:
        legalfile = file_path
    print(legalfile)
    chunked_documents = load_chunk_pdf(legalfile)
    texts=chunked_documents

    print("Embedding case files...")
    #persist_directory="legal_db"
    db4 = Chroma.from_documents(texts, OpenAIEmbeddings())#,persist_directory=persist_directory)
    #db4.persist()

    prompt=ChatPromptTemplate.from_template("""
    You are helpful paralegal working at a legal firm called LFECR (Lawyers for Employee and Consumer Rights). You have been employed for the sole purpose of taking details of a Matter or Case collected by an intake Attorney and using that information to generate a demand letter in a specific format that is acceptable to LFECR. You need to review all documents carefully, take your time, and ensure that you follow the process defined for you to the Tee. This process is as below:

    Step 1: A Matter Analysis Document generated by a COCA attorney is given to you in {context}
    Please use {context} and nothing else 
    An Example of a Matter is provided below
    //Begin Example of a Matter Analysis Document

    Client Hourly Rate: 23.00, biweekly, DD
    Employment Start Date:  Sunday 01 March 2020 
    Employment End date:    06/15/2024
    Job Title:  Commercial Sales Manager
    Work Schedule (per day/week):   40hrs. - 50hrs. a week-- client says random
    Supervisor: Jennifer Lopez, Angel Bonotrous
    Reemployed? (Inc. date and comp):   no.
    Misclassification:  Select
    Summarize Facts:    30yo,male, AA
    12 employees at this location
    approx. 4 years employed here; full time employee
    will submit text messages via portal.
    duties: make sales, process returns, manage maintenance reports, cars, sales records, inventory,

    hours tracked- clocked in and out

    ---day of rest
    6x total
    11/ 2023

    --- wages missing in client's final pay check.

    client turned in his two weeks notice on 6/8

    final check stated client's last day was 6/15

    the client is missing his bonus
    $1,186
    MEAL/REST BREAK Claims: [Choose all that apply]:    Select
    Summarize Facts:     
    # of Violations Per Week:    
    OFF THE CLOCK:  Select
    Summarize Facts:     
    # of minutes/hours per day/week:     
    OVERTIME:   Select
    Summarize Facts:     
    # of overtime minutes/hours per day/week:    
    Late Wage Payment:  Select
    Summarize Facts:     
    HWHFA (Healthy Workplace Healthy Family) Act Claim: Select
    Summarize Facts:     
    Kin Care Claim: Select
    Summarize Facts:     
    EXPENSES:   Select
    Summary of Purchases/Costs:  
    REPORTING TIME PAY: Select
    Summarize Facts:     
    # of shifts and unpaid hours:    
    OTHER W/H (Wage / Hours ) CLAIMS: (Choose All That Apply):  Select
    Summarize Facts:     
    WT (Wrongful Termination)/WTVPP (Wrongful Termination in Violation of Public Policy)/CT (Constructive Termination): Select
    Summarize Facts (Incl. identifying FEHA/ADA/Statutory Violations):   
    COCA scheduled: Monday 24 June 2024 
    Arbitration Agreement?: Select
    Stlmnt Prediction:  Select
    Prediction Details:  
    Coaching:   (No date entered) 
    Co-Pilot:   Select
    //End of Example of a Matter Document

    Step 2: Review the {context} carefully and convert the Matter provided into a Matter JSON document and present it. 
    Here is an example of the Matter JSON Document
    //Example Matter JSON
    {{
      "ClientHourlyRate": "23.00, biweekly, DD",
      "EmploymentStartDate": "Sunday 01 March 2020",
      "EmploymentEndDate": "06/15/2024",
      "JobTitle": "Commercial Sales Manager",
      "WorkSchedule": "40hrs. - 50hrs. a week-- client says random",
      "Supervisor": ["Jennifer Lopez", "Angel Bonotrous"],
      "Reemployed": "no",
      "Misclassification": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": "30yo, male, AA\n12 employees at this location\napprox. 4 years employed here; full time employee\nwill submit text messages via portal.\nduties: make sales, process returns, manage maintenance reports, cars, sales records, inventory,\nhours tracked- clocked in and out\n---day of rest\n6x total\n11/2023\n--- wages missing in client's final pay check.\nclient turned in his two weeks notice on 6/8\nfinal check stated client's last day was 6/15\nthe client is missing his bonus\n$1,186"
      }},
      "MealRestBreakClaims": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "OffTheClock": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "Overtime": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "LateWagePayment": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "HWHFAActClaim": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "KinCareClaim": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "Expenses": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "ReportingTimePay": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "OtherWHClaims": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "WTWTVPPCT": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": "Incl. identifying FEHA/ADA/Statutory Violations"
      }},
      "COCAScheduled": "Monday 24 June 2024",
      "ArbitrationAgreement": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "SettlementPrediction": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }},
      "Coaching": "No date entered",
      "CoPilot": {{
        "ClaimApplicable": "No",
        "SummarizeFacts": ""
      }}
    }}
    //End of Example Matter JSON

    Step 3 
    Using the Complete Claims List {claims} you will now move into what we call "Issue Spotting".
    In issue spotting you will review the Mattter JSON carefully and see if one more more of the claims in the Complete Claims List applies to the Matter. The Claims List containing the full list of possible claims with an example using Acme as a hypothetical company and Coyote as a hypothetical plaintiff or employee are included in your knowledge. 
    You will generate a simple json of complaints from the paintiff. The exact claim you have identified from the from the ClaimsList should be in this json and your reasoning for why this claim applies '''
    The format for complaints json looks like this
      "Complaints": [
        {{
          "Claim": "Failure to Pay Wages Owed",
          "Description": "The Defendant failed to pay wages earned by our Client because his paychecks were short.",
          "Reasoning": "The client is missing his bonus of $1,186 and wages in his final paycheck."
        }},
        {{
          "Claim": "Failure to Comply with California’s “Day of Rest” Law",
          "Description": "The Defendant failed to provide our Client one day of rest in a workweek.",
          "Reasoning": "The client reported 6 instances of not receiving a day of rest in November 2023."
        }},
        {{
          "Claim": "Breach of Contract: Failure to Pay Non-Discretionary Bonus",
          "Description": "The Defendant failed to pay our Client his earned bonus wages.",
          "Reasoning": "The client is missing his bonus of $1,186."
        }},
        {{
          "Claim": "Waiting Time Penalties",
          "Description": "The Defendant owes our Client waiting time penalties because it failed to pay all wages owed at the time of discharge.",
          "Reasoning": "The client is missing wages in his final paycheck and his bonus."
        }}
      ]                                        
    context={context}

    """)

   
    document_chain=create_stuff_documents_chain(llm,prompt)
    retriever=db4.as_retriever()
    retrieval_chain=create_retrieval_chain(retriever,document_chain)

    def load_json_file_to_string(file_path):
        with open(file_path, 'r') as file:
            json_string = file.read()
        return json_string

    # Example usage
    file_path = './ClaimsList.json'  # Replace with your JSON file path
    claimsList = load_json_file_to_string(file_path)
    #print(json_string)

    chat_history = []
    def get_response(input_text):
        #global chat_history
        # Add the current user input to chat history
        chat_history.append(f"User: {input_text}")

        # Prepare the full chat history as a single string
        full_chat_history = "\n".join(chat_history)

        # Get response from the retrieval chain
        response = retrieval_chain.invoke({
            "input": input_text,
            "chat_history": full_chat_history,
            "context": retriever,
            "claims": claimsList
        })

        # Add the assistant response to chat history
        chat_history.append(f"Assistant: {response['answer']}")

        # Return the assistant's response
        return response['answer']

    print("Prompting LLM...")
    
    user_input=""
    response = get_response(user_input)
    #print(response)
    print("Parsing Response...")
    keep_headings = []
    x = response.split("json")
    y = x[len(x)-1]
    z = y.split("```")[0]
    parsed_json = json.loads(z)
    
    # Instead of printing, collect the results
    results = {
        "issues_spotted": [],
        "raw_response": response,
        "parsed_json": parsed_json
    }

    ctr = 1
    for complaint in parsed_json["Complaints"]:
        results["issues_spotted"].append(complaint["Claim"])
        ctr = ctr + 1

    return results

if __name__ == "__main__":
    main()